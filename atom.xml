<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cyberdragoncore.github.io</id>
    <title>CyberDragonCore的博客</title>
    <updated>2021-10-07T12:44:55.215Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://cyberdragoncore.github.io"/>
    <link rel="self" href="https://cyberdragoncore.github.io/atom.xml"/>
    <subtitle>我的学习分享</subtitle>
    <logo>https://cyberdragoncore.github.io/images/avatar.png</logo>
    <icon>https://cyberdragoncore.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, CyberDragonCore的博客</rights>
    <entry>
        <title type="html"><![CDATA[Swift 学习笔记]]></title>
        <id>https://cyberdragoncore.github.io/post/swift-xue-xi-bi-ji/</id>
        <link href="https://cyberdragoncore.github.io/post/swift-xue-xi-bi-ji/">
        </link>
        <updated>2021-10-07T11:52:43.000Z</updated>
        <summary type="html"><![CDATA[<p>最近想学 iOS 开发，但是苦于没有好的入门教程。最近终于在网上找到一个斯坦福的公开课，讲得非常详细。这里做一下笔记。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近想学 iOS 开发，但是苦于没有好的入门教程。最近终于在网上找到一个斯坦福的公开课，讲得非常详细。这里做一下笔记。</p>
<!-- more -->
<p><img src="https://cyberdragoncore.github.io/post-images/1633607711053.png" alt="SwiftUI 中的元素会继承更上一层的元素的一些属性" loading="lazy"><br>
SwiftUI 中的元素会继承更上一层的元素的一些属性。而内部的元素的属性也可以单独设置，并且是内部设置的属性的优先级更高。这很好理解，毕竟 CSS 这些里面也是一样的道理。</p>
<p><img src="https://cyberdragoncore.github.io/post-images/1633608204215.png" alt="函数可以使用简略的写法" loading="lazy"><br>
如果函数只有一个参数，而参数是另一个函数的话。可以省略函数的名字后面的括号，直接跟上 <code>{}</code> 。也可以尽量省略 <code>return</code> 这样的东西，让整个的代码看起来更像是模块化的东西。这样可以像搭积木一样写代码。</p>
<p><img src="https://cyberdragoncore.github.io/post-images/1633609027492.png" alt="SwiftUI 中创建自己需要的视图元素" loading="lazy"><br>
通过这样的简单语句就可以在 SwiftUI 中创建自己需要的视图元素，方便开发和调用。不过我还不太懂为什么这些视图都是结构的形式而不是类。</p>
<p><img src="https://cyberdragoncore.github.io/post-images/1633610138640.png" alt="添加新的预览视图" loading="lazy"><br>
通过添加一段代码可以增加一个预览视图，同时可以设置新视图的样式。</p>
<p>在编辑中使用 Ctrl + Command + Space 可以调出表情符号的工具。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[学习Vim的一个记忆方法]]></title>
        <id>https://cyberdragoncore.github.io/post/xue-xi-vim-de-yi-ge-ji-yi-fang-fa/</id>
        <link href="https://cyberdragoncore.github.io/post/xue-xi-vim-de-yi-ge-ji-yi-fang-fa/">
        </link>
        <updated>2021-10-03T12:22:06.000Z</updated>
        <summary type="html"><![CDATA[<p>这个世界上最好的文本编辑器只可能是Vim或者Emacs了。这两个文本编辑器是真正跨平台的文本编辑器。其中感觉Vim比Emacs更好学，所以我最近开始了Vim的学习。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这个世界上最好的文本编辑器只可能是Vim或者Emacs了。这两个文本编辑器是真正跨平台的文本编辑器。其中感觉Vim比Emacs更好学，所以我最近开始了Vim的学习。</p>
<!-- more -->
<p>之前的时候我只会<code>i</code>和<code>:wq</code>,就连最简单的移动命令都不会。主要是移动的命令有点麻烦，始终记不住hjkl对应的方向。不过最近想到一个办法，由于j对应的是⬇️  ，只要记住了这一个就可以简单的推测出其他的几个方向键了。我们而在hjkl四个字母中只有j的下面比其它三个字母更低。这样就简单记住了方向键了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[学习 Swift 遇到的小问题]]></title>
        <id>https://cyberdragoncore.github.io/post/xue-xi-swift-yu-dao-de-xiao-wen-ti/</id>
        <link href="https://cyberdragoncore.github.io/post/xue-xi-swift-yu-dao-de-xiao-wen-ti/">
        </link>
        <updated>2021-10-01T11:45:43.000Z</updated>
        <summary type="html"><![CDATA[<p>最近在学习Swift，学习中我遇到了几个小问题。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近在学习Swift，学习中我遇到了几个小问题。</p>
<!-- more -->
<p>我找到一本《Swift基础教程》，正在按照书中的内容学习。这本书的内容很简洁易懂，很适合新手。但是可能由于书中演示的 Swift 版本不同的关系，我遇到了几个问题。书中使用的是 Xcode 6 ，而我使用的版本是 Xcode 13 。</p>
<h3 id="问题一">问题一</h3>
<p>书中的提到可以使用 <code>println</code> 函数打印内容。但是我如果使用 <code>println</code> 则会报错。</p>
<h3 id="问题二">问题二</h3>
<p>书中有一个示例是这样的</p>
<pre><code class="language-swift">var speedLimit = 75
var carSpeed = 0

while (carSpeed &lt; 100) {
    carSpeed ++
    switch carSpeed {
    case 0..&lt;20:
        print(&quot;\(carSpeed): You're going really slow&quot;)
    case 20..&lt;30:
        print(&quot;\(carSpeed): Pick up the pace&quot;)
    case 30..&lt;40:
        print(&quot;\(carSpeed): Tap the accelerator&quot;)
    case 40..&lt;50:
        print(&quot;\(carSpeed): Hitting your stride&quot;)
    case 50..&lt;60:
        print(&quot;\(carSpeed): Moving at a good clip&quot;)
    case 60..&lt;70:
        print(&quot;\(carSpeed): Now you're cruising!&quot;)
    case 70...speedLimit:
        print(&quot;\(carSpeed): Warning... approaching the seed limit&quot;)
    default:
        print(&quot;\(carSpeed): You're going too fast!&quot;)
    }
    if carSpeed &gt; speedLimit {
        break
    }
}
</code></pre>
<p>但是这样输入之后在 <code>switch carSpeed {</code> 后面会报错 <code>Expected expression after operator</code> 。同时下面也会有错误提示</p>
<pre><code>error: Playground.playground:6:5: error: expected expression after operator
    switch carSpeed {
    ^
</code></pre>
<p>一开始我以为是 <code>switch</code> 用法不对，但是后来才发现这个错误是针对第5行的语句的。将代码改成这样就可以了</p>
<pre><code class="language-diff">var speedLimit = 75
var carSpeed = 0

while (carSpeed &lt; 100) {
-    carSpeed ++
+    carSpeed = carSpeed + 1
    switch carSpeed {
    case 0..&lt;20:
        print(&quot;\(carSpeed): You're going really slow&quot;)
    case 20..&lt;30:
        print(&quot;\(carSpeed): Pick up the pace&quot;)
    case 30..&lt;40:
        print(&quot;\(carSpeed): Tap the accelerator&quot;)
    case 40..&lt;50:
        print(&quot;\(carSpeed): Hitting your stride&quot;)
    case 50..&lt;60:
        print(&quot;\(carSpeed): Moving at a good clip&quot;)
    case 60..&lt;70:
        print(&quot;\(carSpeed): Now you're cruising!&quot;)
    case 70...speedLimit:
        print(&quot;\(carSpeed): Warning... approaching the seed limit&quot;)
    default:
        print(&quot;\(carSpeed): You're going too fast!&quot;)
    }
    if carSpeed &gt; speedLimit {
        break
    }
}
</code></pre>
<p>个人认为这是 Swift 为了避免写代码时搞不清楚某个变量的具体变化而引入的机制吧。避免大家在使用某个变量前通过 <code>++</code> 等方式修改变量。如果做一个测试就会发现，为了避免混淆 Swift 中已经不支持 <code>++</code> 和 <code>--</code> 等操作了。如果输入下面的代码</p>
<pre><code class="language-swift">var i
i ++
</code></pre>
<p>Xcode 会提示</p>
<pre><code>error: cannot find operator '++' in scope; did you mean '+= 1'?
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[刚才给我的博客加上了 Google Analytics ]]></title>
        <id>https://cyberdragoncore.github.io/post/gang-cai-gei-wo-de-bo-ke-jia-shang-liao-google-analytics/</id>
        <link href="https://cyberdragoncore.github.io/post/gang-cai-gei-wo-de-bo-ke-jia-shang-liao-google-analytics/">
        </link>
        <updated>2021-08-10T13:25:28.000Z</updated>
        <content type="html"><![CDATA[<p>自己第一次用 Google Analytics ，很多地方都不懂怎么弄。试了很久才搞定。中间遇到了不会的地方， Google 了也没有合适的答案。网上的答案讲的界面都不是现在的界面， Google 官方的介绍也不容易理解。我打算有空了出个详细教程。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ToxChat]]></title>
        <id>https://cyberdragoncore.github.io/post/toxchat/</id>
        <link href="https://cyberdragoncore.github.io/post/toxchat/">
        </link>
        <updated>2021-08-10T13:00:25.000Z</updated>
        <content type="html"><![CDATA[<p>这是我的 Tox ID ，我平时很少在线，主要是晚上偶尔在线。<br>
Tox的相关内容请看官网和维基百科<br>
https://tox.chat/<br>
https://zh.wikipedia.org/zh-hans/Tox<br>
<img src="https://cyberdragoncore.github.io/post-images/1628600472415.png" alt="" loading="lazy"><br>
<code>8117D964667C45B29F2D515266D2289702A904EA9456D7F07B831C598F2C583846F5F6F3BEAA</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git 的代理配置]]></title>
        <id>https://cyberdragoncore.github.io/post/git-de-pei-zhi-wen-jian/</id>
        <link href="https://cyberdragoncore.github.io/post/git-de-pei-zhi-wen-jian/">
        </link>
        <updated>2021-07-18T05:18:26.000Z</updated>
        <content type="html"><![CDATA[<p>Git 是我经常用的软件。出于某些原因我经常要从 GitHub 这些网站上下载文件。但是 Git 不会从终端中继承代理设置。所以我平时用 <code>export</code> 设置的代理就用不上了。之后在网上找了几种给 Git 设置代理的方法。</p>
<pre><code class="language-bash">git config --global http.proxy 'http://192.168.0.1:1080'
git config --global https.proxy 'http://192.168.0.1:1080'
</code></pre>
<p>设置完之后可以使用这个命令查看 Git 的配置。</p>
<pre><code class="language-bash">git config --list
</code></pre>
<p>想退出查看界面的话就按下 <code>Q</code> 键。<br>
当然还可以使用这个命令直接编辑 Git 的配置文件。</p>
<pre><code class="language-bash">git config --global --edit
</code></pre>
<p>打开配置文件之后会是这样的。</p>
<pre><code class="language-JSON">[http]
        proxy = http://192.168.0.1:1080
[https]
        proxy = http://192.168.0.1:1080
</code></pre>
<p>这里的编辑器应该默认是 Vim ，据说可以根据自己爱好换成其他的编辑器。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac M1 芯片版使用 Brew 的基本教程]]></title>
        <id>https://cyberdragoncore.github.io/post/mac-m1-xin-pian-ban-shi-yong-brew-de-ji-ben-jiao-cheng/</id>
        <link href="https://cyberdragoncore.github.io/post/mac-m1-xin-pian-ban-shi-yong-brew-de-ji-ben-jiao-cheng/">
        </link>
        <updated>2021-07-18T03:57:22.000Z</updated>
        <summary type="html"><![CDATA[<p>之前听说在 Mac 上也有包管理器，于是我尝试了一下。其中发现了很多坑，在这里记录下来。</p>
]]></summary>
        <content type="html"><![CDATA[<p>之前听说在 Mac 上也有包管理器，于是我尝试了一下。其中发现了很多坑，在这里记录下来。</p>
<!-- more -->
<p>听说最好的包管理器是 Homebrew 。于是我访问了官网进行安装。官网网址是：https://brew.sh/<br>
官网上有安装的脚本</p>
<pre><code class="language-bash">$/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;
</code></pre>
<p>但是这个脚本要使用到 GitHub 的网站，而在国内的环境下就很容易出现各种问题。解决方法之一是使用代理，然后在终端环境中使用 <code>export</code> 命令设置代理。不过后来我看到了清华的一个镜像网站上介绍的方法。网址：https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/<br>
先设置一下镜像。</p>
<pre><code class="language-bash">if [[ &quot;$(uname -s)&quot; == &quot;Linux&quot; ]]; then BREW_TYPE=&quot;linuxbrew&quot;; else BREW_TYPE=&quot;homebrew&quot;; fi
export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;
export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/${BREW_TYPE}-core.git&quot;
export HOMEBREW_BOTTLE_DOMAIN=&quot;https://mirrors.tuna.tsinghua.edu.cn/${BREW_TYPE}-bottles&quot;
</code></pre>
<p>然后使用镜像网站的脚本安装 Brew 。</p>
<pre><code class="language-bash"># 从镜像下载安装脚本并安装 Homebrew / Linuxbrew
git clone --depth=1 https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/install.git brew-install
#下载脚本
/bin/bash brew-install/install.sh
#安装
rm -rf brew-install
#删除刚才下载的脚本
</code></pre>
<p>之后设置环境变量，将 Brew 加入到环境变量中。</p>
<pre><code class="language-bash">test -r ~/.bash_profile &amp;&amp; echo 'eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;' &gt;&gt; ~/.bash_profile
#这是对于 bash
test -r ~/.zprofile &amp;&amp; echo 'eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;' &gt;&gt; ~/.zprofile
#这是对于 zsh
</code></pre>
<p>之后为 Brew 的软件仓库换源。我之前试过不换源，但是速度非常慢。而且不换源会经常中断导致下载失败。但是我在使用了清华的软件仓库镜像之后发现还是经常中断，于是我找到了一个中科大的镜像。参考了网上的这篇文章后将镜像源换成了中科大的。文章网址：https://brew.idayer.com/guide/m1/</p>
<pre><code class="language-bash"># brew
git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.ustc.edu.cn/brew.git

# core
git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git

# cask
git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git
# 我使用的是 zsh ，所以使用这段脚本。
echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/bottles' &gt;&gt; ~/.zprofile
source ~/.zprofile

# bash 使用下面这段脚本
echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/bottles' &gt;&gt; ~/.bash_profile
source ~/.bash_profile
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[日常动态]]></title>
        <id>https://cyberdragoncore.github.io/post/ri-chang-dong-tai/</id>
        <link href="https://cyberdragoncore.github.io/post/ri-chang-dong-tai/">
        </link>
        <updated>2021-05-27T10:43:52.000Z</updated>
        <content type="html"><![CDATA[<p>建了一个#吸猫#的 #Telegram# 频道，有兴趣可以来一起吸猫。<br>
https://t.me/CatInstitute</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Arduino 下载 ESP8266 开发板失败的问题]]></title>
        <id>https://cyberdragoncore.github.io/post/arduino-xia-zai-esp8266-kai-fa-ban-shi-bai-de-wen-ti/</id>
        <link href="https://cyberdragoncore.github.io/post/arduino-xia-zai-esp8266-kai-fa-ban-shi-bai-de-wen-ti/">
        </link>
        <updated>2021-05-04T04:43:55.000Z</updated>
        <summary type="html"><![CDATA[<p>搞了两三天之后终于把ESP8266的资料下载好了。之前也试过换代理，但是每次下载ESP8266的时候都会报下载失败。本来我用Arduino是为了省心，结果搞得我特别累心。但是不知道怎么搞得后来又下载成功了，真是扯。不过问题还是网络的问题，说不定是网络突然又抽风了吧。</p>
]]></summary>
        <content type="html"><![CDATA[<p>搞了两三天之后终于把ESP8266的资料下载好了。之前也试过换代理，但是每次下载ESP8266的时候都会报下载失败。本来我用Arduino是为了省心，结果搞得我特别累心。但是不知道怎么搞得后来又下载成功了，真是扯。不过问题还是网络的问题，说不定是网络突然又抽风了吧。</p>
<!-- more -->
<iframe src="//player.bilibili.com/player.html?aid=460468043&bvid=BV1H541137FP&cid=333397606&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<iframe src="//player.bilibili.com/player.html?aid=417990562&bvid=BV1LV411E7ZV&cid=333549071&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文石 Nova 3 Color 使用体验]]></title>
        <id>https://cyberdragoncore.github.io/post/wen-shi-nova-3-color-shi-yong-ti-yan/</id>
        <link href="https://cyberdragoncore.github.io/post/wen-shi-nova-3-color-shi-yong-ti-yan/">
        </link>
        <updated>2021-05-03T03:01:01.000Z</updated>
        <summary type="html"><![CDATA[<p>最近购买了文石 Nova 3 Color ，2780元的售价感觉还是太高了。不过使用体验非常不错，这里分享一些自己使用的经验。当然我不建议普通人购买，除非你非常喜欢阅读。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近购买了文石 Nova 3 Color ，2780元的售价感觉还是太高了。不过使用体验非常不错，这里分享一些自己使用的经验。当然我不建议普通人购买，除非你非常喜欢阅读。</p>
<!-- more -->
<p>之前发了几个关于 Nova 3 Color 的视频，给大家展示了 Nova 3 Color 的刷新速度和残影的问题。</p>
<iframe src="//player.bilibili.com/player.html?aid=972266007&bvid=BV1Lp4y1a7EP&cid=317632291&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<iframe src="//player.bilibili.com/player.html?aid=247319420&bvid=BV1Hv41187i8&cid=317635394&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<p>视频中可以明显看到电子阅读器的刷新速度是非常慢的，而且还有严重的残影。看视频、打游戏的话体验会非常糟糕。即便是看漫画也会因为残影而影响到体验。浏览网页的时候，滑动的残影和刷新速度让人感觉非常不适。</p>
<figure data-type="image" tabindex="1"><img src="https://cyberdragoncore.github.io/post-images/1620105043400.webp" alt="使用中底部出现的残影" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://cyberdragoncore.github.io/post-images/1620105055947.webp" alt="使用中顶部出现的残影" loading="lazy"></figure>
<p>不过这款电子阅读器还是满足了自己的大多数需求的。毕竟我主要还是用它来看电子书。有了这款电子阅读器之后自己替换掉了使用近三年的 Kindle 。</p>
<p>拿到手上的时候感觉比自己以前一直在用的 Kindle 558 入门款重了不少，单手握持的时候体验有一些不好。当然这个的屏幕是比自己之前的 Kindle 电子阅读器更大，而且设计上也更美观。自己换掉 Kindle 第8代入门款的原因之一就是 Kindle 比较封闭而且性能也不够强。自己平时喜欢看一些博客或者网络上的漫画，而 Kindle 自带的浏览器只能浏览一些简单的网页，很多网页的浏览体验都不好。这款文石的 Nova 3 Color 使用的是开放的 Android 10 ，非常符合自己的需要。而且 Nova 3 Color 的性能也非常强，日常使用完全足够了。自己之前也在纠结要不要买海信推出的 A7 CC 。但是考虑到 A7 CC 的屏幕不够大，还是觉得买大屏幕的 Nova 3 Color 阅读体验应该会更好一些。</p>
<figure data-type="image" tabindex="3"><img src="https://cyberdragoncore.github.io/post-images/1620105068125.webp" alt="Nova 3 Color 自带的浏览器" loading="lazy"></figure>
<p>阅读器自带的应用都有针对墨水屏的优化，使用体验很不错。自带的这个浏览器应该是基于 Chromium 的吧，设计上也可以。有针对一些网络文章提供阅读模式，应该是考虑了大家读网络小说的需求。阅读器自带了一个图书商城，不过我从应用商店里面下载了 Kindle 阅读所以没有使用过这个商城。自己平时就主要是使用 Kindle 阅读看书，此外就是使用 Flym RSS 阅读器订阅网上的新闻。个人感觉墨水屏的刷新速度和残影真的比较影响阅读体验，如果是看漫画或者看某些网页的话的确会不适宜。</p>
<p>个人使用 Nova 3 Color 的感受还是很不错的，但是这款产品终究是小众产品不推荐大家盲目购买。</p>
]]></content>
    </entry>
</feed>